<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:common="p.minn.common.*"
		   xmlns:role="p.minn.privilege.role.*" 
		   width="100%" height="100%" creationComplete="creationCompleteHandler(event)"
		   layout="absolute" name="{resourceManager.getString('resources','role_title')}" xmlns:globalization="p.minn.privilege.globalization.*">
	<fx:Script>
		<![CDATA[
			/**
			 * @author minn
			 * @QQ     394286006
			 */ 
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Tree;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.rpc.http.HTTPService;
			
			import p.minn.common.Entrypt;
			import p.minn.config.BaseConfig;
			import p.minn.event.PageEvent;
			import p.minn.message.Message;
			import p.minn.util.MinnUtil;
			
			[Bindable]
			private var results:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var actives:ArrayCollection=new ArrayCollection([{"text":"","id":BaseConfig.UNKNOWN}]);
			[Bindable]
			private var _treeMenuData:ArrayCollection =new ArrayCollection();
			
			protected function creationCompleteHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				pageBar.addEventListener(PageEvent.PAGE_CHANGE,refresh);
				
				this.addEventListener("updateTreeEvent",function():void{
					menutree_id.invalidateList();
				});
				
				refreshTreeMenu();
				var messageBody:Object=new Object();
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var dictypeService:HTTPService=new HTTPService();
				MinnUtil.send(dictypeService,"/dic?method=getDic&aptype=swf&type='LANGUAGE','ACTIVETYPE'",invokeDic,param);
			}
			
			private function invokeDic(rs:Message):void{
				if(rs.sucess){
					actives.addAll(new ArrayCollection(rs.messageBody.ACTIVETYPE));
					pannel_id.initDic(rs.messageBody);
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}
			
			public function refreshTreeMenu(evt:Event=null):void{
				var messageBody:Object=new Object();
				messageBody.qtype="roleid";
				if(datagrid_id.selectedItem){
					messageBody.query=datagrid_id.selectedItem.id;
				}else{
					messageBody.query=BaseConfig.UNKNOWN;
				}
				
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var treeMenuService:HTTPService=new HTTPService();
				MinnUtil.send(treeMenuService,"/role?method=getRoleRes",invokeTreeMenu,param);
			}
			
			private function invokeTreeMenu(rs:Message):void{
				if(rs.sucess){
					_treeMenuData.source=rs.messageBody;
					menutree_id.selectedIndex=0;
					menutree_id.expandChildrenOf(menutree_id.selectedItem,true);
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
				
			}
			

			
			
			public function del_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				this.parentApplication.checkAlert(resourceManager.getString('resources','common_delete_alert'),executeDel);
			}
			
			private function executeDel():void{
				var messageBody:Object=new Object();
				messageBody.id=datagrid_id.selectedItem.id;
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var dictypeService:HTTPService=new HTTPService();
				MinnUtil.send(dictypeService,"/role?method=del",invokeDel,param);
			}
			
			private function invokeDel(rs:Message):void{
				if(rs.sucess){
					refresh(null);
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}
			
			public function refresh(e:Event=null):void{
				
				var messageBody:Object=new Object();
				messageBody.page=pageBar.pageIndex
				messageBody.rp=pageBar.pageSize;
				var query:String=BaseConfig.UNKNOWN;
				if(name_id.text==''){
					query=BaseConfig.UNKNOWN;
				}else{
					query=name_id.text;
				}
				query+=","
				if(active_id.selectedItem){
					query+=active_id.selectedItem.id;
				}
				
				messageBody.qtype="name,active";
				messageBody.query=query;
				var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
				param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
				var dictypeService:HTTPService=new HTTPService();
				MinnUtil.send(dictypeService,"/role?method=query",invokeQuery,param);
			}
			
			
			
			/**
			 * 查询结果回调函数
			 **/ 
			public function invokeQuery(rs:Message):void{
				if(rs.sucess){
					pageBar.recordCount=rs.messageBody.total;
					results.source=rs.messageBody.result;
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}
			
			private function iconFunction(item:Object):*{
				
				if(!item.children){
				}else{
					if(menutree_id.isItemOpen(item)){
						
						return menutree_id.getStyle("folderOpenIcon");
					}else{  
						return menutree_id.getStyle("folderClosedIcon");
					}
				}
			}
			
			private function getSelectedResource(list:Array):String{
				var resourceids:String="";
				for(var i:int=0;i<list.length;i++){
					var menuitem:Object=list[i];
					
					if(menuitem.selected){
						if(resourceids.length>0){
							resourceids+=",";
						}
						resourceids+=menuitem.id;
					}
					if((menuitem.children as Array).length>0){
						var str:String=getSelectedResource(menuitem.children as Array);
						if(str.length>0){
							resourceids+=","+str ;
						}
					
					}
					  
				}
				return resourceids;
			}
			
			public function saveRoleResource():void{
				if(datagrid_id.selectedItem){
					var resourceids:String=getSelectedResource(_treeMenuData.source);
					
					
					
					if(resourceids.length==0){
						this.parentApplication.msgAlert(resourceManager.getString('resources','role_resource_selected'));
						return;
					}
					
					var messageBody:Object=new Object();
					messageBody.roleid=datagrid_id.selectedItem.id;
					messageBody.resourceids=resourceids;
					
					var url:String="/role?method=saveRoleRes";
					
					var param:Message=new Message(MinnUtil.getEncodeMessage(messageBody));
					param.setSecurityInfo(this.parentApplication.PRIVATEKEY,Math.random(),MinnUtil.getTimeStamp());
					var dictypeService:HTTPService=new HTTPService();
					
					MinnUtil.send(dictypeService,url,invokeSaveRoleResource,param);

				}else{
					this.parentApplication.msgAlert(resourceManager.getString('resources','role_role_selected'));
				}
				
			}
			private function invokeSaveRoleResource(rs:Message):void{
				if(rs.sucess){
					this.parentApplication.msgAlert((resourceManager.getString('resources','alert_success_msg'));
				}else{
					this.parentApplication.msgAlert(rs.messageBody);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	
	<mx:states>
		<s:State name="default"/>    
		<s:State name="qry"/>
	</mx:states>

	<mx:HBox width="100%" height="100%">
	
	<mx:VBox width="100%" height="100%" verticalGap="0"
			 x.default="208" y.default="0">
	<mx:HBox width="100%">
		<mx:Spacer width="100%"/>
		<s:ToggleButton label="{resourceManager.getString('resources','common_hide_search')}" click="currentState='qry'" click.qry="currentState=''" label.qry="{resourceManager.getString('resources','common_show_search')}" />
		<s:ToggleButton label="{resourceManager.getString('resources','common_add')}" click="pannel_id.showValue(null)"/>
		<mx:Spacer width="5"/>
	</mx:HBox>
	<mx:HBox width="100%" includeIn="default">
		<mx:Label text="{resourceManager.getString('resources','role_name')}:"/>
		<mx:TextInput id="name_id"/>
		<mx:Label text="{resourceManager.getString('resources','common_active')}:"/>
		<mx:ComboBox id="active_id" labelField="text" dataProvider="{actives}" x="142" width="129"/>
		<s:Button label="{resourceManager.getString('resources','common_search')}" click="refresh(event)"/>
	</mx:HBox>
	
	<mx:DataGrid width="100%" height="100%" dataProvider="{results}" id="datagrid_id" fontSize="15" textAlign="center" itemDoubleClick="refreshTreeMenu(event);">
		<mx:columns>
			<mx:DataGridColumn headerText="{resourceManager.getString('resources','role_name')}" dataField="name" />
			<mx:DataGridColumn headerText="{resourceManager.getString('resources','role_code')}" dataField="code" />
			<mx:DataGridColumn headerText="{resourceManager.getString('resources','common_active')}" dataField="active_name" />
			<mx:DataGridColumn headerText="{resourceManager.getString('resources','role_sort')}" dataField="sort" />
			<mx:DataGridColumn headerText="{resourceManager.getString('resources','role_comment')}" dataField="comment"/>
			<mx:DataGridColumn headerText="{ resourceManager.getString('resources','common_action')}" width="90"  editable="false" sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="{ resourceManager.getString('resources','globalization_field_language_setting')}" click="parentDocument.globalization_id.getDicLang(data.id,'role')"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{ resourceManager.getString('resources','common_action')}" width="90"  editable="false" sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="{ resourceManager.getString('resources','common_modify')}" click="parentDocument.pannel_id.showValue(data)"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="{ resourceManager.getString('resources','common_action')}" width="90"  editable="false" sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:Button label="{ resourceManager.getString('resources','common_delete')}" click="parentDocument.del_clickHandler(event)">
						</mx:Button>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<common:PageToolBar id="pageBar">
			</common:PageToolBar><mx:Spacer width="5"/>
		</mx:HBox>
	</mx:VBox>
	<mx:VBox width="300" height="100%" verticalGap="0">
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('resources','role_resource_tree')}"/><s:ToggleButton label="{resourceManager.getString('resources','role_save_role_resource')}" click="saveRoleResource()"/><s:Spacer width="100%"/><s:ToggleButton label="{resourceManager.getString('resources','common_refresh')}" click="refreshTreeMenu(null)"/><s:Spacer width="5"/>
		</mx:HBox>
		<mx:Tree height="100%" width="100%" labelField="text" showRoot="true" dataProvider="{_treeMenuData}" itemRenderer="p.minn.tree.TreeCheckBoxRender" iconFunction="iconFunction" id="menutree_id">
		</mx:Tree>
	</mx:VBox>
	</mx:HBox>
	<role:RolePanel id="pannel_id" x="260" y="82" visible="false">
	</role:RolePanel>
	<globalization:GlobalizationSetting id="globalization_id"  x="300" y="82" visible="false"/>
</mx:Module>
